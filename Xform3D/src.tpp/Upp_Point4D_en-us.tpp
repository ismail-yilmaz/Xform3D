topic "Point4D";
[i448;a25;kKO9;2 $$1,0#37138531426314131252341829483380:class]
[l288;2 $$2,2#27521748481378242620020725143825:desc]
[0 $$3,0#96390100711032703541132217272105:end]
[H6;0 $$4,0#05600065144404261032431302351956:begin]
[i448;a25;kKO9;2 $$5,0#37138531426314131252341829483370:item]
[l288;a4;*@5;1 $$6,6#70004532496200323422659154056402:requirement]
[l288;i1121;b17;O9;~~~.1408;2 $$7,0#10431211400427159095818037425705:param]
[i448;b42;O9;2 $$8,8#61672508125594000341940100500538:tparam]
[b42;2 $$9,9#13035079074754324216151401829390:normal]
[2 $$0,0#00000000000000000000000000000000:Default]
[{_} 
[ {{10000@(113.42.0) [s0;%% [*@7;4 Point4`_]]}}&]
[s0; &]
[s1;:noref: [@(0.0.255)3 template][3  <][@(0.0.255)3 typename][3  ][*@4;3 T][3 >]&]
[s1;:Upp`:`:Point4`_: [@(0.0.255) struct ][* Point4`_]&]
[s2;%% Represents a 4D point (vector) with x, y, z, w coordinates. 
[%-*@4 T] must be a floating`-point type (enforced via static`_assert). 
Typically used for homogeneous coordinates in 3D transformations.&]
[s3; &]
[ {{10000F(128)G(128)@1 [s0;%% [* Specializations]]}}&]
[s3; &]
[s5;:Upp`:`:Point4D: [* Point4D]&]
[s2;%% Type defined as [%- Point4`_<][%-@(0.0.255) double][%- >].&]
[s3; &]
[ {{10000F(128)G(128)@1 [s0;%% [* Constructor detail]]}}&]
[s3; &]
[s5;:Upp`:`:Point4`_`:`:Point4`_`(`): [* Point4`_<T>]()&]
[s2;%% Default constructor. Creates a 4D point at origin ([C 0, 0, 
0, 0)].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Point4`_`(T`,T`,T`,T`): [* Point4`_<T>](T [*@3 x], 
T [*@3 y], T [*@3 z], T [*@3 w])&]
[s2;%% Constructor overload. Creates a 4D point with given [%-*@3 x], 
[%-*@3 y], [%-*@3 z] coordinates and [%-*@3 w ]component.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Point4`_`(Pointf`,T`,T`): [* Point4`_<T>](Pointf 
[*@3 p], T [*@3 z], T [*@3 w])&]
[s2;%% Constructor overload. Creates a 4D point from a 2D point [%-*@3 p], 
and with explicit [%-*@3 z] and [%-*@3 w] values.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Point4`_`(Pointf`): [* Point4`_<T>](Pointf 
[*@3 p])&]
[s2;%% Constructor overload. Creates a 4D point from a 2D point [%-*@3 p], 
with [C z `= 0]. and w `= 0.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Point4`_`(Point3`_`,T`): [* Point4`_<T>](Point3`_<T> 
[*@3 p], T [*@3 w])&]
[s2;%% Constructor overload. Creates a 4D point from a 3D point [%-*@3 p], 
with explicit [%-*@3 w] value.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Point4`_`(Point3`_`): [* Point4`_<T>](Point3`_<T> 
[*@3 p])&]
[s2;%% Constructor overload. Creates a 4D point from a 3D point [%-*@3 p], 
with w `= 0.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Point4`_`(const Nuller`&`): [* Point4`_<T>]([@(0.0.255) const] 
[*@3 Nuller][@(0.0.255) `&])&]
[s2;%% Constructor overload. Creates a null 4D point.&]
[s0; &]
[ {{10000F(128)G(128)@1 [s0;%% [* Public Method List]]}}&]
[s3; &]
[s5;:Upp`:`:Point4`_`:`:Clear`(`): [@(0.0.255) void] [* Clear]()&]
[s2;%% Set all components to zero.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:IsZero`(`)const: [@(0.0.255) bool] [* IsZero]() 
[@(0.0.255) const]&]
[s2;%% Checks whether all components are zero.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:SetNull`(`): [@(0.0.255) void] [* SetNull]()&]
[s2;%% Sets all coordinates to Null.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:IsNullInstance`(`)const: [@(0.0.255) bool] 
[* IsNullInstance]() [@(0.0.255) const]&]
[s2;%% Returns true if the point is a null point.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:ToPointf`(`)const: Pointf [* ToPointf]() [@(0.0.255) const]&]
[s2;%% Converts to 2D point by discarding the z and w components.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:ToPointfAffine`(`)const: Pointf [* ToPointfAffine]() 
[@(0.0.255) const]&]
[s2;%% Converts to 2D point using perspective division (x/z, y/z), 
and discards w. Returns Null if z `=`= 0.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:ToPoint3D`(`)const: Point3`_<T> [* ToPoint3D]() 
[@(0.0.255) const]&]
[s2;%% Converts to 3D point by discarding the w components.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:ToPoint3DAffine`(`)const: Point3`_<T> [* ToPoint3DAffine]() 
[@(0.0.255) const]&]
[s2;%%  Converts to 3D point using perspective division (x/w, y/w, 
z/w). Returns Null if w `=`= 0.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Offset`(T`,T`,T`,T`): [@(0.0.255) void] [* Offset](T 
[*@3 dx], T [*@3 dy], T [*@3 dz], T [*@3 dw])&]
[s2;%% Translates the point by ([%-*@3 dx], [%-*@3 dy], [%-*@3 dz], [%-*@3 dw]).&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Offseted`(T`,T`,T`,T`)const: Point4`_<T> 
[* Offseted](T [*@3 dx], T [*@3 dy], T [*@3 dz], T [*@3 dw]) [@(0.0.255) const]&]
[s2;%% Returns a new point translated by ([%-*@3 dx], [%-*@3 dy], [%-*@3 dz], 
[%-*@3 dw])&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Squared`(`)const: T [* Squared]() [@(0.0.255) const]&]
[s2;%% Returns squared length of the 4D point vector.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Length`(`)const: T [* Length]() [@(0.0.255) const]&]
[s2;%% Returns Euclidean length of the 4D point vector.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:IsUnit`(`)const: [@(0.0.255) bool] [* IsUnit]() 
[@(0.0.255) const]&]
[s2;%% Returns true if the 4D point is a unit vector.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Normalize`(`): [@(0.0.255) void] [* Normalize]()&]
[s2;%% Normalizes the 4D point vector in place.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Normalized`(`)const: Point4`_<T> [* Normalized]() 
[@(0.0.255) const]&]
[s2;%% Returns a normalized copy of the 4D point vector.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:FarthestAxis`(`)const: Point4`_<T> [* FarthestAxis]() 
[@(0.0.255) const]&]
[s2;%% Returns a unit vector pointing along the axis with the smallest 
absolute value. Returns a valid axis (1, 0, 0, 0) even if the 
vector is zero or Null.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:FarthestAxisIndex`(`)const: [@(0.0.255) int] 
[* FarthestAxisIndex]() [@(0.0.255) const]&]
[s2;%% Returns the farthest axis as an index, where x `= 0, y `= 
1, z `= 2, w `= 3. Returns 0 even if the vector is zero or Null.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:XYDirection`(`)const: T [* XYDirection]() [@(0.0.255) const]&]
[s5;:Upp`:`:Point4`_`:`:YZDirection`(`)const: T [* YZDirection]() [@(0.0.255) const]&]
[s5;:Upp`:`:Point4`_`:`:ZWDirection`(`)const: T [* ZWDirection]() [@(0.0.255) const]&]
[s5;:Upp`:`:Point4`_`:`:WXDirection`(`)const: T [* WXDirection]() [@(0.0.255) const]&]
[s2; [+93 Returns the angle in radians between two adjacent axes (using 
atan2).]&]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`=`(const Point`_`&`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) `=]([@(0.0.255) const] Point`_<T>[@(0.0.255) `&] 
[*@3 p])&]
[s2;%% Sets [* x]  and [* y] coordinates to [%-*@3 p]`'s corresponding 
coordinates and clears the [* z] and [* w ]components.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`=`(const Point3`_`&`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) `=]([@(0.0.255) const] Point3`_<T>[@(0.0.255) `&] 
[*@3 p])&]
[s2;%% Sets [* x] , [* y], [* z] coordinates to [%-*@3 p]`'s corresponding 
coordinates and clears the [* w ]component.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`+`=`(const Point4`_`&`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) `+`=]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 p])&]
[s2;%% Increases [* x, y, z, w ]coordinates with [*@3 p]`'s corresponding 
coordinates.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`+`=`(T`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) `+`=]([*@4 T]_[*@3 t])&]
[s2;%% Increases [* x, y, z, w ]coordinates with the same value [%-*@3 t].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`-`=`(const Point4`_`&`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) `-`=]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 p])&]
[s2;%% Decreases [* x, y, z, w ]coordinates with [*@3 p]`'s corresponding 
coordinates.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`-`=`(T`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) `-`=]([*@4 T]_[*@3 t])&]
[s2;%% Decreases [* x, y, z, w ]coordinates with the same value [%-*@3 t].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`*`=`(const Point4`_`&`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) `*`=]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 p])&]
[s2;%% Multiplies [* x, y, z, w ]coordinates with [*@3 p]`'s corresponding 
coordinates.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`*`=`(T`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) `*`=]([*@4 T]_[*@3 t])&]
[s2;%% Multiplies [* x, y, z, w ]coordinates with the same value [%-*@3 t].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`/`=`(const Point4`_`&`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) /`=]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 p])&]
[s2;%% Divides [* x, y, z, w ]coordinates by [*@3 p]`'s corresponding 
coordinates.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`/`=`(T`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) /`=]([*@4 T]_[*@3 t])&]
[s2;%% Divides [* x, y, z, w ]coordinates by the same value [%-*@3 t].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`+`+`(`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) `+`+]()&]
[s2;%% Increments [* x, y, z, w ]coordinates.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator`-`-`(`): Point4`_<T>[@(0.0.255) `&] 
operator[@(0.0.255) `-`-]()&]
[s2;%% Decrements [* x, y, z, w ]coordinates.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Min`(`)const: T [* Min]() [@(0.0.255) const]&]
[s2;%% Returns the minimum component value.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Max`(`)const: T [* Max]() [@(0.0.255) const]&]
[s2;%% Returns the maximum component value.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:AbsMin`(`)const: T [* AbsMin]() [@(0.0.255) const]&]
[s2;%% Returns the absolute minimum component value.&]
[s3;%% &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:AbsMax`(`)const: T [* AbsMax]() [@(0.0.255) const]&]
[s2;%% Returns the absolute maximum component value.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:XY`(`)const: Point`_<T> [* XY]() [@(0.0.255) const]&]
[s5;:Upp`:`:Point4`_`:`:YX`(`)const: Point`_<T> [* YX]() [@(0.0.255) const]&]
[s5;:Upp`:`:Point4`_`:`:YZ`(`)const: Point`_<T> [* YZ]() [@(0.0.255) const]&]
[s5;:Upp`:`:Point4`_`:`:ZY`(`)const: Point`_<T> [* ZY]() [@(0.0.255) const]&]
[s5;:Upp`:`:Point4`_`:`:ZW`(`)const: Point`_<T> [* ZW]() [@(0.0.255) const]&]
[s5;:Upp`:`:Point4`_`:`:WZ`(`)const: Point`_<T> [* WZ]() [@(0.0.255) const]&]
[s5;:Upp`:`:Point4`_`:`:WX`(`)const: Point`_<T> [* WX]() [@(0.0.255) const]&]
[s5;:Upp`:`:Point4`_`:`:XW`(`)const: Point`_<T> [* XW]() [@(0.0.255) const]&]
[s2;%% Returns pairs of components as 2D points.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:GetHashValue`(`)const: [@8 hash`_t ][* GetHashValue]() 
[@(0.0.255) const]&]
[s2;%% Returns the hash value of 4D point.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:ToString`(`)const: String [* ToString]() [@(0.0.255) const]&]
[s2;%% Returns the string representation of 4D point.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator Value`(`)const: operator Value() 
[@(0.0.255) const]&]
[s2;%% Converts 4D point to Value.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Point4`_`(const Value`&`): [* Point4`_<T>]([@(0.0.255) const] 
Value[@(0.0.255) `&] [*@3 src])&]
[s2;%% Converts back the [%-*@3 src] value to 4D point.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:operator Ref`(`): operator Ref()&]
[s2;%% Returns a reference (Upp`::Ref) to 4D point.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Serialize`(Stream`&`): [@(0.0.255) void] [* Serialize](Stream[@(0.0.255) `&
] [*@3 s])&]
[s2;%% Serializes the 4D point object to stream [%-*@3 s].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Jsonize`(JsonIO`&`): [@(0.0.255) void] [* Jsonize](JsonIO[@(0.0.255) `&
] [*@3 jio])&]
[s2;%% Jsonizes the 4D point object.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Point4`_`:`:Xmlize`(XmlIO`&`): [@(0.0.255) void] [* Xmlize](XmlIO[@(0.0.255) `&
] [*@3 xio])&]
[s2;%%  Xmlizes the 4D point object.&]
[s3; &]
[s0;%% &]
[ {{10000F(128)G(128)@1 [s0;%% [* Friend List]]}}&]
[s3; &]
[s5;:Upp`:`:operator`+`(const Point4`_`&`,const Point4`_`&`): Point4`_<T> 
operator[@(0.0.255) `+]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 a], [@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s5;:Upp`:`:operator`+`(const Point4`_`&`,T`): Point4`_<T> operator[@(0.0.255) `+]([@(0.0.255) c
onst] Point4`_<T>[@(0.0.255) `&] [*@3 a], T [*@3 t])&]
[s2;%% Returns the result of the addition of 4D point [%-*@3 a] with 
another 4D point [%-*@3 b] or with value [%-*@3 t].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:operator`-`(const Point4`_`&`,const Point4`_`&`): Point4`_<T> 
operator[@(0.0.255) `-]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 a], [@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s5;:Upp`:`:operator`-`(const Point4`_`&`,T`): Point4`_<T> operator[@(0.0.255) `-]([@(0.0.255) c
onst] Point4`_<T>[@(0.0.255) `&] [*@3 a], T [*@3 t])&]
[s2;%% Returns the result of the subtraction of 4D point [%-*@3 b] 
or value [%-*@3 t] from 3D point [%-*@3 a].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:operator`*`(const Point4`_`&`,const Point4`_`&`): Point4`_<T> 
operator[@(0.0.255) `*]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 a], [@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s5;:Upp`:`:operator`*`(const Point4`_`&`,T`): Point4`_<T> operator[@(0.0.255) `*]([@(0.0.255) c
onst] Point4`_<T>[@(0.0.255) `&] [*@3 a], T [*@3 t])&]
[s2;%% Returns the result of the multiplication of 4D point [%-*@3 a] 
with another 4D point [%-*@3 b] or with value [%-*@3 t].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:operator`/`(const Point4`_`&`,const Point4`_`&`): Point4`_<T> 
operator[@(0.0.255) /]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 a], [@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s5;:Upp`:`:operator`/`(const Point4`_`&`,T`): Point4`_<T> operator[@(0.0.255) /]([@(0.0.255) c
onst] Point4`_<T>[@(0.0.255) `&] [*@3 a], T [*@3 t])&]
[s2;%% Returns the result of the division of 4D point [%-*@3 a] by 
another 4D point [%-*@3 b] or by value [%-*@3 t].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:operator`^`(const Point4`_`&`,const Point4`_`&`): T operator[@(0.0.255) `^](
[@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 a], [@(0.0.255) const] 
Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s2;%% Returns the dot product of 4D point [%-*@3 a] and 4D point [%-*@3 b].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:operator`=`=`(const Point4`_`&`,const Point4`_`&`): [@(0.0.255) bool] 
operator[@(0.0.255) `=`=]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 a], [@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s2;%% Returns true if the respective coordinates of [%-*@3 a] and 
[%-*@3 b] are equal.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:operator`!`=`(const Point4`_`&`,const Point4`_`&`): [@(0.0.255) bool] 
operator[@(0.0.255) !`=]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 a], [@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s2;%% Returns true if [%-*@3 a] and [%-*@3 b] have at least one unequal 
coordinate.&]
[s3; &]
[s4; &]
[s5;:Upp`:`:min`(const Point4`_`&`,const Point4`_`&`): Point4`_<T> 
[* min]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 a], [@(0.0.255) const] 
Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s2;%% Returns a 4D p[%- oint ]with it`'s coordinates equaling the 
minimum of the respective coordinates between [%-*@3 a][%-@3  ][%- and] 
[%-*@3 b].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:max`(const Point4`_`&`,const Point4`_`&`): Point4`_<T> 
[* max]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 a], [@(0.0.255) const] 
Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s2;%% Returns a 3D p[%- oint ]with it`'s coordinates equaling the 
maximum of the respective coordinates between [%-*@3 a][%-@3  ][%- and] 
[%-*@3 b].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Nvl`(const Point4`_`&`,const Point4`_`&`): Point4`_<T> 
[* Nvl]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 a], [@(0.0.255) const] 
Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s2;%% Returns [%-*@3 b] if [%-*@3 a] is Null, otherwise returns [%-*@3 a].&]
[s3; &]
[s3; &]
[ {{10000F(128)G(128)@1 [s0;%% [* Function List]]}}&]
[s3; &]
[s5;:Upp`:`:Mid`(const Point4`_`&`,const Point4`_`&`): [@(0.0.255) template] 
<[@(0.0.255) typename] T>&]
[s5;:Upp`:`:Mid`(const Point4`_`&`,const Point4`_`&`): [@(0.0.255) constexpr] 
Point4`_<T> [* Mid]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 a], 
[@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s2;%% Returns the midpoint between [%-*@3 a] and [%-*@3 b].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Mid`(const Point4`_`&`,const Point4`_`&`,T`): [@(0.0.255) template] 
<[@(0.0.255) typename] T>&]
[s5;:Upp`:`:Mid`(const Point4`_`&`,const Point4`_`&`,T`): [@(0.0.255) constexpr] 
Point4`_<T> [* Mid]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 a], 
[@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 b], T [*@3 w])&]
[s2;%% Returns the weighted midpoint between [%-*@3 a] and [%-*@3 b], 
using weight [%-*@3 w].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Length`(const Point4`_`&`,T`): [@(0.0.255) template] <[@(0.0.255) typename] 
T>&]
[s5;:Upp`:`:Length`(const Point4`_`&`,T`): [@(0.0.255) constexpr] Point4`_<T> 
[* Length]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 p], T [*@3 l])&]
[s2;%% Returns a 4D point (vector) in the same direction as [%-*@3 p], 
but with length [%-*@3 l].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:UnitVector`(const Point4`_`&`): [@(0.0.255) template] <[@(0.0.255) typename] 
T>&]
[s5;:Upp`:`:UnitVector`(const Point4`_`&`): [@(0.0.255) constexpr] 
Point4`_<T> [* UnitVector]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 p])&]
[s2;%% Returns a unit`-length 4D point (vector) in the same direction 
as [%-*@3 p].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:DotProduct`(const Point4`_`&`,const Point4`_`&`): [@(0.0.255) template] 
<[@(0.0.255) typename] T>&]
[s5;:Upp`:`:DotProduct`(const Point4`_`&`,const Point4`_`&`): [@(0.0.255) constexpr] 
T [* DotProduct]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 a], 
[@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 b])&]
[s2;%% Returns dot product of 4D objects [%-*@3 a] and [%-*@3 b].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Orthogonal`(const Point4`_`&`,const Point4`_`&`): [@(0.0.255) template] 
<[@(0.0.255) typename] T>&]
[s5;:Upp`:`:Orthogonal`(const Point4`_`&`,const Point4`_`&`): [@(0.0.255) constexpr] 
Point4`_<T> [* Orthogonal]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 p], [@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 against])&]
[s2;%% Returns the component of vector [%-*@3 p] orthogonal to [%-*@3 against].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:Orthonormal`(const Point4`_`&`,const Point4`_`&`): [@(0.0.255) template] 
<[@(0.0.255) typename] T>&]
[s5;:Upp`:`:Orthonormal`(const Point4`_`&`,const Point4`_`&`): [@(0.0.255) constexpr] 
Point4`_<T> [* Orthonormal]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] 
[*@3 p], [@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 against])&]
[s2;%% Returns the unit vector orthogonal to [%-*@3 against] in the 
direction of [%-*@3 p].&]
[s3; &]
[s4; &]
[s5;:Upp`:`:IsEpsqual`(const Point4`_`&`,const Point4`_`&`,T`): [@(0.0.255) template] 
<[@(0.0.255) typename] T>&]
[s5;:Upp`:`:IsEpsqual`(const Point4`_`&`,const Point4`_`&`,T`): [@(0.0.255) bool] 
[* IsEpsqual]([@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 p1], 
[@(0.0.255) const] Point4`_<T>[@(0.0.255) `&] [*@3 p2], T epsilon [@(0.0.255) `=] 
std[@(0.0.255) `::]numeric`_limits<T>[@(0.0.255) `::][*@3 epsilon]())&]
[s2;%% Performs a fuzzy comparison between 4D point [%-*@3 p1 ]and 
4D point [%-*@3 p2]. Uses relative [%-*@3 epsilon]`-based tolerance 
on each of the x, y, z, and w coordinates. Returns true if all 
coordinates are approximately equal within [%-*@3 epsilon].&]
[s3; &]
[s0; ]]